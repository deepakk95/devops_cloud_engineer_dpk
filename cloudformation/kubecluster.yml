Description: >
  Devops Cloud Engineer / Deepak
  It will create EKS Cluster.
Parameters:
  EnvironmentName:
    Description: The environment name will be mapped to the resources.
    Default: devops-cloud-engineer-deep
    Type: String

Resources:
  ClusterProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${EnvironmentName}-instance-profile
      Path: "/"
      Roles:
        - !Ref ClusterRole

  ClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-cluster-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  AmazonEKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Version: "1.19"
      Name: !Sub ${EnvironmentName}-cluster
      RoleArn: !GetAtt ClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${EnvironmentName}-sec-grp
        SubnetIds:
          Fn::Split:
            - ","
            - Fn::ImportValue:
                Fn::Sub: ${EnvironmentName}-public-subnets
Outputs:
  AmazonEksId:
    Description: This is amazon EKS Cluster Id
    Value: !Ref AmazonEKSCluster
    Export:
      Name: !Sub ${EnvironmentName}-AmazonEKSCluster

  EKSRoleArn:
    Description: This is the EKS Role for accessing the resources
    Value: !GetAtt ClusterRole.Arn
    Export:
      Name: !Sub ${EnvironmentName}-AmazonEKSRole
