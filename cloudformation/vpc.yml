---
Description: >
  Devops Cloud Engineer / Deepak
  It will create a virtual private cloud that has public subnets for Amazon EKS

Parameters:
  EnvironmentName:
    Description: The environment name will be mapped to the resources.
    Default: devops-cloud-engineer-deep
    Type: String

  VPCCIDR:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC.

  PublicSubnet1CIDR:
    Type: String
    Default: 192.168.0.0/18
    Description: CidrBlock for public subnet 1

  PublicSubnet2CIDR:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock for public subnet 2

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-virtual-private-cloud

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  AttachVPCGateway:
    Type: "AWS::EC2::AttachVPCGateway"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-subnets
        - Key: Network
          Value: !Sub ${EnvironmentName}-public-network

  PublicRoute:
    DependsOn: AttachVPCGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  NatGateway1:
    DependsOn:
      - NatGatewayLink1
      - PublicSubnet1
      - AttachVPCGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayLink1.AllocationId'
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGatewayAZ1

  NatGateway2:
    DependsOn:
      - NatGatewayLink2
      - PublicSubnet2
      - AttachVPCGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayLink2.AllocationId'
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGatewayAZ2

  NatGatewayLink1:
    DependsOn:
      - AttachVPCGateway
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayLink2:
    DependsOn:
      - AttachVPCGateway
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 1
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet1CIDR
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-subnet1
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 2
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet2CIDR
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-pub-subnet2
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ClusterComSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: This will be utilized by cluster to talk to the nodes.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

Outputs:
  VPC:
    Description: It will create a reference to virtual private cloud
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-virtual-private-cloud

  SubnetIds:
    Description: These are the subnet ID's in the VPC
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ] ]
    Export:
      Name: !Sub ${EnvironmentName}-public-subnets

  SecurityGroup:
    Description: This security group will be used to talk to the nodes by the cluster
    Value: !Ref ClusterComSecGroup
    Export:
      Name: !Sub ${EnvironmentName}-sec-grp      

  PublicRouteTable:
    Description: Public Routing Table
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${EnvironmentName}-public-routetable

  PublicSubnet1:
    Description: Public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-public-subnet1

  PublicSubnet2:
    Description: Public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-public-subnet2
