version: 2.1

jobs:
  build:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  upload-docker:
    docker:
      - image: circleci/golang:1.15

    working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Build docker container
          command: |
            docker build --tag=devops-cloud-engineer-deep .
            docker image ls

      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: devops-cloud-engineer-deep"
            docker login -u="deepakk95" -p="Deepak@06"
            docker tag devops-cloud-engineer-deep deepakk95/devops-cloud-engineer-deep:$CIRCLE_WORKFLOW_ID
            docker push deepakk95/devops-cloud-engineer-deep:$CIRCLE_WORKFLOW_ID

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure EKS network exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/network-parameters.json
      - run:
          name: Ensure EKS Cluster exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/cluster-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Ensure Nodegroup exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodegroup.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/nodegroup-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Ensure management instances exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/management.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/management-parameters.json \
              --output text >> ~/checkIfDeployed.txt
            cat ~/checkIfDeployed.txt
      - run:
          name: Extract the IPs of the management instances for Ansible
          command: |
            echo [management] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - checkIfDeployed.txt

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - add_ssh_keys:
      #     fingerprints:
      #       - "1f:b5:45:7e:c1:f7:13:d9:3c:ba:08:12:82:8d:39:37"
      - run:
          name: Install dependencies
          command: yum install -y tar gzip

      - run:
          name: Configure server
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network1.yml \
              --tags project=${ENVIRONMENT_NAME}1-project \
              --stack-name "${ENVIRONMENT_NAME}1-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/network-parameters.json

  configure-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - add_ssh_keys:
      #     fingerprints:
      #       - "1f:b5:45:7e:c1:f7:13:d9:3c:ba:08:12:82:8d:39:37"
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      # - run:
      #     name: Configure server
      #     command: |
      #       "echo Hello World!"
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network2.yml \
              --tags project=${ENVIRONMENT_NAME}2-project \
              --stack-name "${ENVIRONMENT_NAME}2-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/network-parameters.json
      - run:
          name: Display the LoadBalancer's DNS name
          command: |
            "echo Hello World"
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - elb_dns.txt

  deploy-docker:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # - add_ssh_keys:
      #     fingerprints:
      #       - "1f:b5:45:7e:c1:f7:13:d9:3c:ba:08:12:82:8d:39:37"
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      # - run:
      #     name: Deploy newest Docker Image
      #     command: |
      #       "echo Hello World! This is Hello World"
      #     no_output_timeout: 2m

workflows:
  default:
    jobs:
      - build
      # - upload-docker:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only: [ master ]
      # - deploy-infrastructure:
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only: [ master ]
      # - configure-infrastructure:
      #     requires:
      #       - deploy-infrastructure
      - configure-cluster:
          requires:
            - configure-infrastructure
            - upload-docker
      - deploy-docker:
          requires:
            - configure-cluster
