version: 2.1

jobs:
  build:
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - run:
          name: Install the dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            make lint

  upload-docker:
    docker:
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build docker image
          command: |
            docker build --tag=devops-cloud-engineer-deep .
            docker image ls
      - run:
          name: Upload docker image to dockerhub
          command: |
            echo "Docker ID and Image: devops-cloud-engineer-deep"
            docker login -u="deepakk95" -p="*********"
            docker tag devops-cloud-engineer-deep deepakk95/devops-cloud-engineer-deep:$CIRCLE_WORKFLOW_ID
            docker push deepakk95/devops-cloud-engineer-deep:$CIRCLE_WORKFLOW_ID

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install the Dependencies
          command: yum install -y tar gzip
      - run:
          name: Create Amazon EKS Network
          command: |
            aws cloudformation deploy \
              --template-file cloudFormation/vpc.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudFormation/vpc-parameters.json
      - run:
          name: Create Amazon EKS Cluster
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/kubecluster.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudFormation/kubecluster-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 20m
      - run:
          name: Create NodeGroups ( Instances )
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodeinstances.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudFormation/nodeinstances-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Create Instances for Managing
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/manager.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudFormation/manager-parameters.json \

      - run:
          name: Fetch the IP Address for Manager Insances for Ansible
          command: |
            echo [manager] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-manager*" \
              --output text >> ~/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "1f:b5:45:7e:c1:f7:13:d9:3c:ba:08:12:82:8d:39:37"
      - attach_workspace:
          at: ~/
      - run:
          name: Install  the Dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-server.yml

  configure-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "1f:b5:45:7e:c1:f7:13:d9:3c:ba:08:12:82:8d:39:37"
      - attach_workspace:
          at: ~/
      - run:
          name: Install the Dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-cluster.yml
      - run:
          name: Wait for sometime
          command: |
                echo "Waiting 60 seconds before fetching Load balancer DNS name"
                sleep 60
      - run:
          name: Fetch Load Balancer's DNS name
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt loadbalancerdns.yml
            cat ~/loadbalancerdns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - loadbalancerdns.txt

  deploy-docker:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "1f:b5:45:7e:c1:f7:13:d9:3c:ba:08:12:82:8d:39:37"
      - attach_workspace:
          at: ~/
      - run:
          name: Install the Dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy the docker image
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt deploy-app.yml
          no_output_timeout: 5m

workflows:
  default:
    jobs:
      - build
      - upload-docker:
          requires:
            - build
          filters:
            branches:
              only: [ master ]
      - deploy-infrastructure:
          requires:
            - build
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - configure-cluster:
          requires:
            - configure-infrastructure
            - upload-docker
      - deploy-docker:
          requires:
            - configure-cluster
